module Euler where 

import Common

import qualified Data.Map as M
import Data.List
import System.IO
import System.IO.Error



{- Problem 1
    If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23.
    Find the sum of all the multiples of 3 or 5 below 1000.
-}

p1 = sum [x |x <-[1..999] ,((x`mod`3) == 0) || ((x `mod` 5) == 0)]

ones = 1:ones

fib 1 = 1
fib 2 = 2
fib n = fib (n-1) + fib (n-2)

{- Problem 2
    Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:

     1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

    By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
-}

fibs = 1: 2 :(zipWith (+) fibs (tail fibs))
p2 =sum $ takeWhile (<4000000) $ filter even fibs

{- Problem 3 :
   The prime factors of 13195 are 5, 7, 13 and 29.
   What is the largest prime factor of the number 600851475143 ?
   sqrt(600851475143) < 775146 largest prime factor is less than this
 
   find primes while marking a number non prime instead give it a factor.    



    I dont know how to do this, this is not something i can do lying down.
-}

p3' n = stop -1 
  where 
    start_at =  floor $ sqrt n
    stop = last $ takeWhile (\x -> (n `mod` x) /= 0  ) [start_at,(start_at-1)..1]

p3 = stop -1 
  where 
    stop = last $ takeWhile (\x -> ( 600851475143 `mod` x) /= 0  ) [600851475142,600851475141..1]


